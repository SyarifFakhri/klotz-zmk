#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define JMP  4
#define OSL  5

#define COMBOMS 20

&lt {
     flavor = "balanced";
};

/ {
    combos {
        // BASE
            compatible = "zmk,combos";
            combo_esc {
                timeout-ms = <COMBOMS>;
                key-positions = <0 1>;
                bindings = <&kp ESC>;
                layers = <BASE>;
            };
            
            compatible = "zmk,combos";
            combo_to_base {
                timeout-ms = <COMBOMS>;
                key-positions = <0 1>;
                bindings = <&to BASE>;
                layers = <NAV SYM ADJ OSL>;
            };

            // GLOBAL
            compatible = "zmk,combos";
            combo_lgui {
                timeout-ms = <COMBOMS>;
                key-positions = <0 2>;
                bindings = <&kp LGUI>;
            };
            
            compatible = "zmk,combos";
            combo_bspc {
                timeout-ms = <COMBOMS>;
                key-positions = <3 4>;
                bindings = <&kp BSPC>;
            };
            
            compatible = "zmk,combos";
            combo_del {
                timeout-ms = <COMBOMS>;
                key-positions = <8 9>;
                bindings = <&kp DEL>;
            };

            compatible = "zmk,combos";
            combo_ret {
                timeout-ms = <COMBOMS>;
                key-positions = <13 14>;
                bindings = <&kp RET>;
            }; 
            
            compatible = "zmk,combos";
            combo_ctrlz {
                timeout-ms = <COMBOMS>;
                key-positions = <20 21>;
                bindings
                  = <&macro_ctrlz>;
            };

            compatible = "zmk,combos";
            combo_ctrlshftz {
                timeout-ms = <COMBOMS>;
                key-positions = <20 21 22>;
                bindings
                  = <&macro_ctrlshftz>;
            };

            compatible = "zmk,combos";
            combo_ctrlx {
                timeout-ms = <COMBOMS>;
                key-positions = <21 22>;
                bindings
                  = <&macro_ctrlx>;
            };

            compatible = "zmk,combos";
            combo_ctrlc {
                timeout-ms = <COMBOMS>;
                key-positions = <22 23>;
                bindings
                  = <&macro_ctrlc>;
            };
            
           compatible = "zmk,combos";
           combo_ctrlv {
                timeout-ms = <COMBOMS>;
                key-positions = <23 24>;
                bindings
                  = <&macro_ctrlv>;
            };

            // Mod macros
           compatible = "zmk,combos";
           combo_ctrl_alt {
                timeout-ms = <COMBOMS>;
                key-positions = <17 18>;
                bindings
                  = <&macro_sticky_ctrl_alt>;
            };
            
            compatible = "zmk,combos";
            combo_ctrl_shift {
                timeout-ms = <COMBOMS>;
                key-positions = <16 17>;
                bindings
                  = <&macro_sticky_ctrl_shift>;
            };
            
            compatible = "zmk,combos";
            combo_shift_alt {
                timeout-ms = <COMBOMS>;
                key-positions = <16 18>;
                bindings
                  = <&macro_sticky_shift_alt>;
            };
            
            compatible = "zmk,combos";
            combo_ctrl {
                timeout-ms = <COMBOMS>;
                key-positions = <26 27>;
                bindings
                  = <&kp RCTRL>;

            compatible = "zmk,combos";
            combo_alt {
                timeout-ms = <COMBOMS>;
                key-positions = <26 27>;
                bindings
                  = <&kp RALT>;
    };

    macros {
        macro_esc: macro_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to BASE>
                , <&kp ESC>
                ;
        };        
        
        tabcw: tabcw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp TAB>
                ;
        };
        tabccw: tabccw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LSHFT>
                ;
        };
        macro_ctrlz: macro_ctrlz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Z>
                , <&macro_release &kp LCTRL>
                ;
        };
        macro_ctrlshftz: macro_ctrlshftz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp Z>
                , <&macro_release &kp LCTRL>
                , <&macro_release &kp LSHFT>
                ;
        };
        macro_ctrlx: macro_ctrlx {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        macro_ctrlc: macro_ctrlc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        macro_ctrlv: macro_ctrlv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        }; 
        macro_ctrls: macro_ctrls {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp S>
                , <&macro_release &kp LCTRL>
                ;
        }; 
         
        macro_sticky_ctrl_alt: macro_sticky_ctrl_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&sk LA(LCTRL)>
                ;
        }; 
    
        macro_sticky_ctrl_shift: macro_sticky_ctrl_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&sk LC(LSHFT)>
                ;
        }; 

        macro_sticky_shift_alt: macro_sticky_shift_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&sk LS(LALT)>
                ;
        }; 
        
        macro_up: macro_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp U>
                , <&macro_release &kp LCTRL>
                ;
        };
        macro_down: macro_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp D>
                , <&macro_release &kp LCTRL>
                ;
        };
        
        os_hk: os_hk {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_press &kp LGUI>
                , <&macro_press &kp LSHFT>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_release &kp LALT>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp LSHFT>
                ;
        };
        
        m_set: m_set {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_tap &kp M>
                , <&macro_press &kp LSHFT>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_release &kp LSHFT>
                ;
        };

        m_jmp: m_jmp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_tap &kp GRAVE>
                , <&macro_press &kp LSHFT>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_release &kp LSHFT>
                ;
        };

        m_paste: m_paste {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_tap &kp DQT>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp P>
                ;
        };

        m_dkp: m_dkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                ;
        };
    };

    behaviors {
        encoder_alt_tab: encoder_alt_tab {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&tabcw>, <&tabccw>;
        };

        ct: custom_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
        };
        
        ctl: custom_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
        };

        htl: hold_toggle_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&mo>, <&tog>;
            tapping-term-ms = <220>;
        };
        
        csl: custom_sticky_layer {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            release-after-ms = <2000>;
            quick-release;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
      };
    };

        keymap {
                compatible = "zmk,keymap";
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                base_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "BASE"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &kp Q       &kp W       &kp F       &kp P       &kp B           &kp J       &kp L       &kp U       &kp Y       &kp SEMI
    &kp A       &kp R       &kp S       &kp T       &kp G           &kp M       &kp N       &kp E       &kp I       &kp O
   &htl ADJ NAV &csl SYM    &kp DOT     &kp D       &kp V           &kp K       &kp H       &kp C       &kp X       &kp Z
                                        &csl NAV    &kp SPACE       &skq RSHFT  &csl NAV
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                nav_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "NAVI"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &trans      &kp N7      &kp N8      &kp N9      &kp EQUAL       &os_hk V    &kp LEFT   &kp UP      &kp DOWN    &kp RIGHT
    &kp TAB     &kp N4      &kp N5      &kp N6      &kp MINUS       &os_hk C    &skq RSHFT &skq RCTRL  &skq LALT   &skq LGUI
    &trans      &kp N1      &kp N2      &kp N3      &kp KP_MULTIPLY &os_hk F    &macro_up  &kp UNDERSCORE &macro_down &trans
                                        &kp N0      &kp SPACE       &kp SPACE   &skq RSHFT
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                sim_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "SYM"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &trans      &kp LALT  &kp KP_MULTIPLY &kp GRAVE &kp LBRC        &kp RBRC    &kp AMPS    &kp LT      &kp GT      &kp COLON
    &trans      &kp DLLR    &kp PRCNT   &kp EXCL    &kp LPAR        &kp RPAR    &kp BSLH    &kp SQT     &kp DQT     &kp QMARK
    &kp CARET   &kp CAPS    &kp AT      &kp HASH    &kp LBKT        &kp RBKT    &kp COMMA   &kp DOT     &kp FSLH    &kp EQUAL
                                        &trans      &kp SPACE       &kp SPACE   &skq RSHFT
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                adjust_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "ADJ"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &sys_reset  &bt BT_CLR &kp LCTRL    &kp LSHFT   &bt BT_SEL 1    &trans      &kp F7      &kp F8      &kp F9      &kp F12
    &bootloader &bt BT_NXT &out OUT_BLE &trans      &bt BT_SEL 2    &trans      &kp F4      &kp F5      &kp F6      &kp F11  
    &trans      &bt BT_PRV &out OUT_USB &trans      &bt BT_SEL 3    &trans      &kp F1      &kp F2      &kp F3      &kp F10     
                                        &bt BT_SEL 0 &skq LALT      &skq LCTRL  &skq RSHFT   
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };
                
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                jump_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "JMP"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &m_set A    &m_jmp A    &trans      &m_paste N0 &trans          &trans      &trans      &trans      &trans      &trans
    &m_set B    &m_jmp B    &trans      &trans      &trans          &trans      &trans      &trans      &m_dkp O I  &trans
    &m_set C    &m_jmp C    &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans
                                        &trans      &trans          &trans      &trans
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


                os_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
display-name= "OS"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
// ╷           ╷           ╷           ╷           ╷           ╷   ╷           ╷           ╷           ╷           ╷           ╷

    &kp LA(F4)  &trans      &os_hk T    &os_hk H    &trans          &trans      &trans      &trans      &trans      &trans
    &os_hk A    &os_hk V    &os_hk C    &os_hk F    &trans          &trans      &trans      &trans      &trans      &trans
    &trans      &os_hk E    &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans
                                        &trans      &trans          &trans      &trans
                        >;
            sensor-bindings = <&encoder_alt_tab &inc_dec_kp C_VOL_UP C_VOL_DN>;
                };
        };
};